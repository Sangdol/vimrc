"
" Yes, we test vimscript.
"

Before (setup):
  source $HOME/.vim/rc/utility.vim
  source $HOME/.vim/rc/gpt.vim

" StartsWith
Execute (StartsWith):
  Assert !StartsWith('abc', 'bc')
  Assert !StartsWith('abc', 'b')
  Assert !StartsWith('abc', 'z')
  Assert !StartsWith('abc', '')
  Assert StartsWith('abc', 'ab')
  Assert StartsWith('abc', 'a')

" Contains
Execute (Contains):
  Assert !Contains('abc', 'z')
  Assert !Contains('abc', '')
  Assert Contains('abc', 'bc')
  Assert Contains('abc', 'b')
  Assert Contains('abc', 'ab')
  Assert Contains('abc', 'a')

" ReplaceLine
Given (hello):
  hello

Execute (SubstituteLine):
  call SubstituteLine('e', 'a', '')

Expect (hallo):
  hallo

" zip / zipmap
Execute (Zip / ZipMap):
  let res = Zip(['a', 'b'], [1, 2])
  AssertEqual res, [['a', 1], ['b', 2]]

  let res = ZipMap(['a', 'b'], [1, 2])
  AssertEqual res, {'a': 1, 'b': 2}

  let res = ZipMap('ab', [1, 2])
  AssertEqual res, {'a': 1, 'b': 2}

" StringToArray
Execute (StringToArray):
  AssertEqual StringToArray('abc'), ['a', 'b', 'c']


Execute (BuildMessages):
  let res = BuildMessages("abc")
  AssertEqual res, [{'role': 'user', 'content': 'abc'}]

  let res = BuildMessages("abc \n---\n def")
  AssertEqual res, [{'role': 'user', 'content': 'abc '}, 
    \ {'role': 'assistant', 'content': ' def'}]

  let res = BuildMessages("abc \n---\n def \n---\n ghi")
  AssertEqual res, [{'role': 'user', 'content': 'abc '}, 
    \ {'role': 'assistant', 'content': ' def '}, 
    \ {'role': 'user', 'content': ' ghi'}]
